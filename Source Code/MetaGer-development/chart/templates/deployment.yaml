apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "chart.fullname" . }}
  labels:
    {{- include "chart.labels" . | nindent 4 }}
spec:
  {{- if not .Values.autoscaling.enabled }}
  replicas: {{ .Values.replicaCount }}
  {{- end }}
  selector:
    matchLabels:
      {{- include "chart.selectorLabels" . | nindent 6 }}
  template:
    metadata:
      {{- with .Values.podAnnotations }}
      annotations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      labels:
        {{- include "chart.labels" . | nindent 8 }}
    spec:
      {{- with .Values.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      serviceAccountName: {{ include "chart.serviceAccountName" . }}
      securityContext:
        {{- toYaml .Values.podSecurityContext | nindent 8 }}
      volumes:
        - name: secrets
          secret:
            secretName: {{ template "secret_name" . }}
        - name: mglogs-persistent-storage
          persistentVolumeClaim:
            claimName: mglogs
        - name: redis-config
          configMap:
            name: {{ include "chart.fullname" . }}-redis-container-config
        - name: sqlite-databases
          emptyDir: {}
        - name: fast-logs
          emptyDir: {}
      containers:
        - name: fpm
          securityContext:
            {{- toYaml .Values.securityContext | nindent 12 }}
          image: "{{ template "fpm_image" . }}"
          imagePullPolicy: {{ .Values.image.fpm.pullPolicy }}
          env:
          - name: APP_ENV
            value: {{ .Values.environment }}
          - name: APP_URL
            value: {{ .Values.app_url }}
          volumeMounts:
          - name: secrets
            mountPath: /metager/metager_app/.env
            subPath: ENV_PRODUCTION
            readOnly: true
          - name: secrets
            mountPath: /metager/metager_app/config/sumas.json
            subPath: SUMAS_JSON
          - name: secrets
            mountPath: /metager/metager_app/config/blacklistDomains.txt
            subPath: BLACKLIST_DOMAINS
          - name: secrets
            mountPath: /metager/metager_app/config/blacklistUrl.txt
            subPath: BLACKLIST_URL
          - name: secrets
            mountPath: /metager/metager_app/config/adBlacklistDomains.txt
            subPath: ADBLACKLIST_DOMAINS
          - name: secrets
            mountPath: /metager/metager_app/config/adBlacklistUrl.txt
            subPath: ADBLACKLIST_URL
          - name: secrets
            mountPath: /metager/metager_app/config/blacklistDescriptionUrl.txt
            subPath: BLACKLIST_DESCRIPTION_URL
          - name: mglogs-persistent-storage
            mountPath: /metager/metager_app/storage/logs/metager
            readOnly: false
          - name: sqlite-databases
            mountPath: /metager/metager_app/database/databases
          - name: fast-logs
            mountPath: /metager/metager_app/storage/logs/metager/fast_dir
          ports:
            - name: http
              containerPort: 8080
              protocol: TCP
          livenessProbe:
            httpGet:
              path: /health-check/liveness
              port: http
          readinessProbe:
            httpGet:
              path: /health-check/liveness
              port: http
          startupProbe:
            tcpSocket:
              port: 9000
            failureThreshold: 60
            periodSeconds: 1
          resources:
            requests:
              cpu: 500m
              memory: 500M
            limits:
        - name: scheduler
          securityContext:
            {{- toYaml .Values.securityContext | nindent 12 }}
          image: "{{ template "fpm_image" . }}"
          command: ["/usr/local/bin/php"]
          args: ["artisan", "schedule:work-mg"]
          imagePullPolicy: {{ .Values.image.fpm.pullPolicy }}
          env:
          - name: APP_ENV
            value: {{ .Values.environment }}
          - name: APP_URL
            value: {{ .Values.app_url }}
          volumeMounts:
          - name: secrets
            mountPath: /metager/metager_app/.env
            subPath: ENV_PRODUCTION
            readOnly: true
          - name: mglogs-persistent-storage
            mountPath: /metager/metager_app/storage/logs/metager
            readOnly: false
          - name: sqlite-databases
            mountPath: /metager/metager_app/database/databases
          - name: fast-logs
            mountPath: /metager/metager_app/storage/logs/metager/fast_dir
          ports:
            - name: http
              containerPort: 8080
              protocol: TCP
          livenessProbe:
            httpGet:
              path: /health-check/liveness-scheduler
              port: http
          readinessProbe:
            httpGet:
              path: /health-check/liveness-scheduler
              port: http
          startupProbe:
            httpGet:
              path: /health-check/liveness-scheduler
              port: http
          resources:
            requests:
              cpu: 100m
              memory: 100M
            limits:
        - name: worker
          securityContext:
            {{- toYaml .Values.securityContext | nindent 12 }}
          image: "{{ template "fpm_image" . }}"
          command: ["/usr/local/bin/php"]
          args: ["artisan", "requests:fetcher"]
          imagePullPolicy: {{ .Values.image.fpm.pullPolicy }}
          env:
          - name: APP_ENV
            value: {{ .Values.environment }}
          volumeMounts:
          - name: secrets
            mountPath: /metager/metager_app/.env
            subPath: ENV_PRODUCTION
            readOnly: true
          ports:
            - name: http
              containerPort: 8080
              protocol: TCP
          livenessProbe:
            httpGet:
              path: /health-check/liveness-worker
              port: http
          readinessProbe:
            httpGet:
              path: /health-check/liveness-worker
              port: http
          startupProbe:
            httpGet:
              path: /health-check/liveness-worker
              port: http
          resources:
            requests:
              cpu: 500m
              memory: 100M
            limits:
        - name: nginx
          securityContext:
            {{- toYaml .Values.securityContext | nindent 12 }}
          image: "{{ template "nginx_image" . }}"
          imagePullPolicy: {{ .Values.image.nginx.pullPolicy }}
          ports:
            - name: http
              containerPort: 8080
              protocol: TCP
          livenessProbe:
            httpGet:
              path: /health-check/nginx
              port: http
          readinessProbe:
            httpGet:
              path: /health-check/nginx
              port: http
          startupProbe:
            httpGet:
              path: /health-check/nginx
              port: http
            failureThreshold: 60
            periodSeconds: 1
          resources:
            requests:
              cpu: 100m
              memory: 100M
            limits:
        - name: redis
          image: "{{ template "redis_image" . }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          args: ["redis-server", "/usr/local/etc/redis/redis.conf"]
          volumeMounts:
          - name: redis-config
            mountPath: /usr/local/etc/redis/redis.conf
            subPath: redis.conf
            readOnly: true
          livenessProbe:
            exec:
              command:
              - redis-cli
              - ping 
            initialDelaySeconds: 2
          readinessProbe:
            exec:
              command:
              - redis-cli
              - ping 
            initialDelaySeconds: 2
          resources:
            requests:
              cpu: 100m
              memory: 1Gi
            limits:
          securityContext:
            runAsUser: 999
            runAsGroup: 999
            allowPrivilegeEscalation: false
      {{- with .Values.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - weight: 50
              podAffinityTerm:
                labelSelector:
                  matchLabels:
                    app.kubernetes.io/instance: {{ .Release.Name }}
                topologyKey: kubernetes.io/hostname
      {{- with .Values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
